{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://simple-emote-extension/./lib.js","webpack://simple-emote-extension/./emotes.js","webpack://simple-emote-extension/./dom2.js","webpack://simple-emote-extension/./navigation.js","webpack://simple-emote-extension/./main.js"],"sourcesContent":["function getAuthTokenCookie() {\r\n  const cookies = document.cookie.split(\";\");\r\n  for (let i = 0; i < cookies.length; i++) {\r\n    const cookie = cookies[i].trim();\r\n    // Does this cookie string begin with the name we want?\r\n    if (cookie.startsWith(\"auth-token=\")) {\r\n      return cookie.substring(\"auth-token=\".length, cookie.length);\r\n    }\r\n  }\r\n  return null; // Cookie not found\r\n}\r\n\r\n// Fetch Twitch user ID by username\r\nconst getTwitchUserId = async (username) => {\r\n  if (!username) return null;\r\n\r\n  const response = await fetch(\"https://gql.twitch.tv/gql\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Client-Id\": \"ue6666qo983tsx6so1t0vnawi233wa\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: `{user(login:\"${username}\" lookupType:ALL){id}}`,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) return null;\r\n\r\n  const data = await response.json();\r\n\r\n  return data?.data?.user?.id\r\n    ? { id: data.data.user.id, username: username }\r\n    : null;\r\n};\r\n\r\n// Listen for navigation changes to detect new usernames\r\n\r\n\r\nexport {\r\n  getTwitchUserId,\r\n  getAuthTokenCookie,\r\n};\r\n","const emotes = new Map();\r\nlet emotesDebug = false;\r\nlet emoteRegex;\r\nlet globalEmotesLoaded = false;\r\nlet currentUserObject;\r\n\r\nconst loadTwitchEmotes = async (username) => {\r\n  if (!username) return null;\r\n\r\n  const query = `query{user(login:\"${username}\"){subscriptionProducts{emotes{id state text token}}}}`;\r\n\r\n  try {\r\n    const response = await fetch(\"https://gql.twitch.tv/gql\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Client-Id\": \"ue6666qo983tsx6so1t0vnawi233wa\",\r\n      },\r\n      body: JSON.stringify({ query }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.errors) {\r\n      const errorMessage = data.errors[0].message;\r\n      throw new Error(`Twitch API request failed: ${errorMessage}`);\r\n    }\r\n\r\n    data.data.user.subscriptionProducts.forEach((product) => {\r\n      product.emotes.forEach((emote) => {\r\n        emotes.set(emote.token, {\r\n          url: `https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/2.0`,\r\n        });\r\n      });\r\n    });\r\n\r\n    return emotes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching emotes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst loadGlobalTwitchEmotes = async (emoteSetId) => {\r\n  if (!emoteSetId) return null;\r\n\r\n  const query = `\r\n    query {\r\n      emoteSet(id: \"${emoteSetId}\") { \r\n        emotes { id token }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    const response = await fetch(\"https://gql.twitch.tv/gql\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Client-Id\": \"ue6666qo983tsx6so1t0vnawi233wa\",\r\n      },\r\n      body: JSON.stringify({ query }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.errors) {\r\n      const errorMessage = data.errors[0].message;\r\n      throw new Error(`Twitch API request failed: ${errorMessage}`);\r\n    }\r\n    if (data && data.data && data.data.emoteSet && data.data.emoteSet.emotes) {\r\n      data.data.emoteSet.emotes.forEach((emote) => {\r\n        emotes.set(emote.token, {\r\n          url: `https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/2.0`,\r\n        });\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching emotes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nasync function loadFFZEmotes(id) {\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.frankerfacez.com/v1/room/id/${id}`\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error(`FFZ HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    if (data && data.sets && data.room && data.room.set) {\r\n      for (const emote of data.sets[data.room.set].emoticons) {\r\n        if (emote.name && emote.urls && emote.urls[1]) {\r\n          emotes.set(emote.name, {\r\n            name: emote.name,\r\n            url: emote.urls[1],\r\n            bigUrl: emote.urls[2],\r\n            height: emote.height || null,\r\n            width: emote.width || null,\r\n            service: \"ffz\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    if (emotesDebug) {\r\n      console.error(`Error loading FFZ emotes for ${username}:`, error.message);\r\n    }\r\n  }\r\n}\r\n\r\nasync function loadBTTVEmotes(userId) {\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.betterttv.net/3/cached/users/twitch/${userId}`\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error(`BTTV HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    const allEmotes = [\r\n      ...(data.channelEmotes || []),\r\n      ...(data.sharedEmotes || []),\r\n    ];\r\n    for (const emote of allEmotes) {\r\n      if (emote.code && emote.id) {\r\n        emotes.set(emote.code, {\r\n          name: emote.code,\r\n          url: `https://cdn.betterttv.net/emote/${emote.id}/1x`,\r\n          bigUrl: `https://cdn.betterttv.net/emote/${emote.id}/3x`,\r\n          width: emote.width || null,\r\n          height: emote.height || null,\r\n          service: \"bttv\"\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    if (emotesDebug) {\r\n      console.error(\r\n        `Error loading BTTV emotes for user ${userId}:`,\r\n        error.message\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nasync function load7TVEmotes(userId) {\r\n  try {\r\n    const response = await fetch(`https://7tv.io/v3/users/twitch/${userId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`7TV HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    if (data && data.emote_set && data.emote_set.emotes) {\r\n      for (const emote of data.emote_set.emotes) {\r\n        const file = emote.data?.host?.files.find((f) => f.name === \"1x.webp\");\r\n        if (emote.name && emote.id && file) {\r\n          emotes.set(emote.name, {\r\n            name: emote.name,\r\n            url: `https:${emote.data.host.url}/1x.webp`,\r\n            bigUrl: `https:${emote.data.host.url}/3x.webp`,\r\n            width: file.width || null,\r\n            height: file.height || null,\r\n            modifier: emote.flags > 0,\r\n            service: \"7tv\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    if (emotesDebug) {\r\n      console.error(\r\n        `Error loading 7TV emotes for user ${userId}:`,\r\n        error.message\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nasync function loadGlobalEmotes() {\r\n  try {\r\n    const [ffzResponse, bttvResponse, sevenTVResponse] = await Promise.all([\r\n      fetch(\"https://api.frankerfacez.com/v1/set/global/ids\"),\r\n      fetch(\"https://api.betterttv.net/3/cached/emotes/global\"),\r\n      fetch(\"https://7tv.io/v3/emote-sets/global\"),\r\n    ]);\r\n\r\n    if (!ffzResponse.ok)\r\n      throw new Error(`FFZ Global HTTP error! status: ${ffzResponse.status}`);\r\n    if (!bttvResponse.ok)\r\n      throw new Error(`BTTV Global HTTP error! status: ${bttvResponse.status}`);\r\n    if (!sevenTVResponse.ok)\r\n      throw new Error(\r\n        `7TV Global HTTP error! status: ${sevenTVResponse.status}`\r\n      );\r\n\r\n    const [ffzGlobal, bttvGlobal, sevenTVGlobal] = await Promise.all([\r\n      ffzResponse.json(),\r\n      bttvResponse.json(),\r\n      sevenTVResponse.json(),\r\n    ]);\r\n\r\n    // Populate FFZ global emotes\r\n    if (ffzGlobal && ffzGlobal.sets && ffzGlobal.sets[3]) {\r\n      for (const emote of ffzGlobal.sets[3].emoticons) {\r\n        if (emote.name && emote.urls && emote.urls[1]) {\r\n          emotes.set(emote.name, {\r\n            name: emote.name,\r\n            url: emote.urls[1],\r\n            url: emote.urls[2],\r\n            height: emote.height || null,\r\n            width: emote.width || null,\r\n            service: \"ffz\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Populate BTTV global emotes\r\n    if (bttvGlobal) {\r\n      for (const emote of bttvGlobal) {\r\n        if (emote.code && emote.id) {\r\n          emotes.set(emote.code, {\r\n            name: emote.code,\r\n            url: `https://cdn.betterttv.net/emote/${emote.id}/1x`,\r\n            bigUrl: `https://cdn.betterttv.net/emote/${emote.id}/3x`,\r\n            width: emote.width || null,\r\n            height: emote.height || null,\r\n            service: \"bttv\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Populate 7TV global emotes\r\n    if (sevenTVGlobal && sevenTVGlobal.emotes) {\r\n      for (const emote of sevenTVGlobal.emotes) {\r\n        const file = emote.data?.host?.files.find((f) => f.name === \"1x.webp\");\r\n        if (emote.name && emote.id && file) {\r\n          emotes.set(emote.name, {\r\n            name: emote.name,\r\n            url: `https:${emote.data.host.url}/1x.webp`,\r\n            bigUrl: `https:${emote.data.host.url}/3x.webp`,\r\n            width: file.width || null,\r\n            height: file.height || null,\r\n            modifier: emote.flags > 0,\r\n            service: \"7tv\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emotesDebug) {\r\n      console.info(\"Loaded global emotes:\", emotes.size);\r\n    }\r\n  } catch (error) {\r\n    if (emotesDebug) {\r\n      console.error(\"Error loading global emotes:\", error.message);\r\n    }\r\n  }\r\n}\r\n\r\nasync function loadEmotes(userObject) {\r\n  // Check if all required fields are present\r\n  if (!userObject || !userObject.username || !userObject.id) {\r\n    if (emotesDebug) {\r\n      console.error(\"Invalid userObject provided:\", userObject);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Check if emotes are already loaded for this user\r\n  if (currentUserObject && currentUserObject.id === userObject.id) {\r\n    if (emotesDebug) {\r\n      console.info(`Emotes already loaded for ${userObject.username}`);\r\n    }\r\n    return; \r\n  }\r\n\r\n  // Update currentUserObject to the new user\r\n  currentUserObject = userObject; \r\n\r\n  if (emotesDebug) {\r\n    console.info(`Loading emotes for channel: ${userObject.username}`);\r\n  }\r\n\r\n  try {\r\n    await Promise.all([\r\n      loadFFZEmotes(userObject.id),\r\n      loadBTTVEmotes(userObject.id),\r\n      load7TVEmotes(userObject.id),\r\n    ]);\r\n\r\n    emoteRegex = createEmoteRegex(emotes);\r\n\r\n    if (emotesDebug) {\r\n      console.info(`Loaded ${emotes.size} channel emotes`);\r\n    }\r\n  } catch (error) {\r\n    if (emotesDebug) {\r\n      console.error(\"Failed to load channel emotes:\", error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getEmote(emoteName) {\r\n  return emotes.get(emoteName);\r\n}\r\n\r\nconst createEmoteRegex = (emoteMap) => {\r\n  const escapedEmoteNames = Array.from(emoteMap.keys()).map((name) => {\r\n    // Escape special regex characters\r\n    return name.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'); \r\n  });\r\n\r\n  return new RegExp(\r\n    escapedEmoteNames.map((name) => `\\\\b(${name})\\\\b`).join(\"|\"),\r\n    \"i\"\r\n  );\r\n};\r\n\r\nconst containsEmote = (element) => emoteRegex.test(element.textContent);\r\n\r\nasync function initializeEmotes() {\r\n  // Load global emotes once\r\n  if (!globalEmotesLoaded)  {\r\n    await loadGlobalEmotes();\r\n    globalEmotesLoaded = true;\r\n  }\r\n  \r\n  emoteRegex = createEmoteRegex(emotes);\r\n}\r\n\r\n// Export necessary functions and the debug variable\r\nexport { loadEmotes, getEmote, initializeEmotes, containsEmote };\r\n","import { getEmote, containsEmote } from \"./emotes.js\";\r\n\r\n// Define the state machine\r\nconst ChatMessageStateMachine = {\r\n  states: {\r\n    PROCESSING: \"PROCESSING\",\r\n    PROCESSING_MODIFIER: \"PROCESSING_MODIFIER\",\r\n    FINAL: \"FINAL\",\r\n  },\r\n\r\n  transitions: {\r\n    PROCESSING: {\r\n      encounterModifier: \"PROCESSING_MODIFIER\",\r\n      endProcessing: \"FINAL\",\r\n    },\r\n    PROCESSING_MODIFIER: {\r\n      continueModifier: \"PROCESSING_MODIFIER\",\r\n      endModifier: \"PROCESSING\",\r\n    },\r\n    FINAL: {}, // No transitions from FINAL\r\n  },\r\n};\r\n\r\n// Helper function to peek two elements back\r\nconst peekTwoElementsBack = (fragment) => {\r\n  const children = fragment.children;\r\n  if (children.length >= 2) {\r\n    return [children[children.length - 2], children[children.length - 1]];\r\n  }\r\n  return [null, null];\r\n};\r\n\r\n// Helper functions\r\nconst createTextFragment = (text) => {\r\n  const span = document.createElement(\"span\");\r\n  span.classList.add(\"text-fragment\");\r\n  span.textContent = text.trim();\r\n  return span;\r\n};\r\n\r\nconst createEmoteImage = (emote) => {\r\n  const img = document.createElement(\"img\");\r\n  img.src = emote.url;\r\n  img.alt = emote.name;\r\n  img.className = \"unreadable\";\r\n  if (emote.modifier) {\r\n    img.classList.add(\"modifier\");\r\n  }\r\n  return img;\r\n};\r\n\r\nconst createModifierContainer = () => {\r\n  const div = document.createElement(\"div\");\r\n  div.classList.add(\"modifier-container\");\r\n  return div;\r\n};\r\n\r\nconst processWord = (word, fragment, text, modifierDiv, currentState) => {\r\n  if (word[0] === \"@\") return { fragment, text, modifierDiv, currentState }; // Skip mentions\r\n\r\n  const emote = getEmote(word);\r\n  if (emote) {\r\n    if (text.trim()) {\r\n      fragment.appendChild(createTextFragment(text));\r\n      text = \"\";\r\n    }\r\n\r\n    const emoteImage = createEmoteImage(emote);\r\n    if (emote.modifier) {\r\n      if (currentState === ChatMessageStateMachine.states.PROCESSING) {\r\n        currentState = ChatMessageStateMachine.states.PROCESSING_MODIFIER;\r\n        modifierDiv = createModifierContainer();\r\n        if (fragment.lastElementChild instanceof HTMLImageElement) {\r\n          modifierDiv.appendChild(fragment.lastElementChild);\r\n        }\r\n      }\r\n      modifierDiv.appendChild(emoteImage);\r\n    } else {\r\n      if (currentState === ChatMessageStateMachine.states.PROCESSING_MODIFIER) {\r\n        fragment.appendChild(modifierDiv);\r\n        modifierDiv = null;\r\n        currentState = ChatMessageStateMachine.states.PROCESSING;\r\n      }\r\n      fragment.appendChild(emoteImage);\r\n    }\r\n  } else {\r\n    text += ` ${word} `;\r\n  }\r\n\r\n  return { fragment, text, modifierDiv, currentState };\r\n};\r\n\r\nconst processNode = (node, fragment, text, modifierDiv, currentState) => {\r\n  if (node.nodeType === Node.TEXT_NODE) {\r\n    const words = node.textContent.split(/\\s+/);\r\n    return words.reduce(\r\n      (acc, word) =>\r\n        processWord(\r\n          word,\r\n          acc.fragment,\r\n          acc.text,\r\n          acc.modifierDiv,\r\n          acc.currentState\r\n        ),\r\n      { fragment, text, modifierDiv, currentState }\r\n    );\r\n  } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n    if (node.classList.contains(\"chat-line__message--emote\")) {\r\n      const clonedEmote = node.cloneNode(true);\r\n      clonedEmote.className = \"unreadable\";\r\n      fragment.appendChild(clonedEmote);\r\n      if (currentState === ChatMessageStateMachine.states.PROCESSING_MODIFIER) {\r\n        fragment.appendChild(modifierDiv);\r\n        modifierDiv = null;\r\n        currentState = ChatMessageStateMachine.states.PROCESSING;\r\n      }\r\n    } else {\r\n      return Array.from(node.childNodes).reduce(\r\n        (acc, childNode) =>\r\n          processNode(\r\n            childNode,\r\n            acc.fragment,\r\n            acc.text,\r\n            acc.modifierDiv,\r\n            acc.currentState\r\n          ),\r\n        { fragment, text, modifierDiv, currentState }\r\n      );\r\n    }\r\n  }\r\n  return { fragment, text, modifierDiv, currentState };\r\n};\r\n\r\n/// Helper function to process the message content\r\nconst processMessageContent = (chatMessageBody) => {\r\n  let currentState = ChatMessageStateMachine.states.PROCESSING;\r\n  let fragment = new DocumentFragment();\r\n  let text = \"\";\r\n  let modifierDiv = null;\r\n\r\n  const result = Array.from(chatMessageBody.childNodes).reduce(\r\n    (acc, node) =>\r\n      processNode(\r\n        node,\r\n        acc.fragment,\r\n        acc.text,\r\n        acc.modifierDiv,\r\n        acc.currentState\r\n      ),\r\n    { fragment, text, modifierDiv, currentState }\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\n// Helper function to finalize the message processing\r\nconst finalizeMessageProcessing = (fragment, text, modifierDiv) => {\r\n  if (text.trim()) {\r\n    fragment.appendChild(createTextFragment(text));\r\n  }\r\n  if (modifierDiv) {\r\n    fragment.appendChild(modifierDiv);\r\n  }\r\n  return fragment;\r\n};\r\n\r\n// Main processChatMessage function\r\nconst processChatMessage = (chatMessageBody) => {\r\n  if (!chatMessageBody) return;\r\n\r\n  if (containsEmote(chatMessageBody)) {\r\n    const { fragment, text, modifierDiv } =\r\n      processMessageContent(chatMessageBody);\r\n    const finalFragment = finalizeMessageProcessing(\r\n      fragment,\r\n      text,\r\n      modifierDiv\r\n    );\r\n    chatMessageBody.replaceChildren(finalFragment);\r\n  }\r\n};\r\n\r\nconst setupChatObserver = () => {\r\n  let eventListenersLoaded = false;\r\n\r\n  const observer = new MutationObserver((mutationsList) => {\r\n    for (let i = 0; i < mutationsList.length; i++) {\r\n      const mutation = mutationsList[i];\r\n      if (mutation.type === \"childList\") {\r\n        for (let j = 0; j < mutation.addedNodes.length; j++) {\r\n          const node = mutation.addedNodes[j];\r\n          if (node.nodeType === 1 && node.className === \"chat-line__message\") {\r\n            if (!eventListenersLoaded) {\r\n              manageEventListeners();\r\n              eventListenersLoaded = true;\r\n            }\r\n            processChatMessage(\r\n              node.querySelector('[data-a-target=\"chat-line-message-body\"]')\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  observer.observe(document, {\r\n    childList: true,\r\n    subtree: true,\r\n  });\r\n};\r\n\r\nconst manageEventListeners = () => {\r\n  const root = document.querySelector(\".root\");\r\n\r\n  const handleMouseOver = function (event) {\r\n    const emoteElement = event.target.closest(\".unreadable\");\r\n    if (emoteElement) {\r\n      const modifierContainer = emoteElement.closest('.modifier-container');\r\n      const emotes = modifierContainer ? Array.from(modifierContainer.querySelectorAll('.unreadable')) : [emoteElement];\r\n\r\n      // Create tooltip\r\n      const tooltip = document.createElement(\"div\");\r\n      tooltip.classList.add(\"emote-tooltip\");\r\n\r\n      // Create content for each emote\r\n      emotes.forEach((emote, index) => {\r\n        const emoteName = emote.getAttribute(\"alt\");\r\n        const emoteInfo = getEmote(emoteName);\r\n\r\n        const emoteContent = document.createElement('div');\r\n        emoteContent.classList.add('emote-content');\r\n\r\n        // Create and append emote preview elements\r\n        const emotePreview = document.createElement('div');\r\n        emotePreview.classList.add('emote-preview');\r\n        const emoteImg = document.createElement('img');\r\n        emoteImg.src = emoteInfo.bigUrl;\r\n        emoteImg.alt = emoteName;\r\n        emotePreview.appendChild(emoteImg);\r\n        emoteContent.appendChild(emotePreview);\r\n\r\n        // Create and append emote info elements\r\n        const emoteInfoDiv = document.createElement('div');\r\n        emoteInfoDiv.classList.add('emote-info');\r\n        const emoteNameDiv = document.createElement('div');\r\n        emoteNameDiv.classList.add('emote-name');\r\n        emoteNameDiv.textContent = emoteName;\r\n        const emoteServiceDiv = document.createElement('div');\r\n        emoteServiceDiv.classList.add('emote-service');\r\n        emoteServiceDiv.textContent = emoteInfo.service.toUpperCase() + \" Emote\";\r\n        emoteInfoDiv.appendChild(emoteNameDiv);\r\n        emoteInfoDiv.appendChild(emoteServiceDiv);\r\n        emoteContent.appendChild(emoteInfoDiv);\r\n\r\n        tooltip.appendChild(emoteContent);\r\n\r\n        // Add separator if not the last emote\r\n        if (index < emotes.length - 1) {\r\n          const separator = document.createElement('div');\r\n          separator.classList.add('emote-separator');\r\n          tooltip.appendChild(separator);\r\n        }\r\n      });\r\n\r\n      document.body.appendChild(tooltip);\r\n\r\n      // Style the tooltip\r\n      Object.assign(tooltip.style, {\r\n        position: 'absolute',\r\n        backgroundColor: '#18181b',\r\n        color: 'white',\r\n        padding: '8px',\r\n        borderRadius: '4px',\r\n        boxShadow: '0 2px 10px rgba(0,0,0,0.2)',\r\n        zIndex: '1000',\r\n        fontSize: '14px'\r\n      });\r\n\r\n      // Style each emote content\r\n      tooltip.querySelectorAll('.emote-content').forEach(content => {\r\n        Object.assign(content.style, {\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          gap: '8px',\r\n          padding: '4px 0'\r\n        });\r\n      });\r\n\r\n      // Style the emote preview\r\n      tooltip.querySelectorAll('.emote-preview').forEach(preview => {\r\n        Object.assign(preview.style, {\r\n          width: '40px',\r\n          height: '40px',\r\n          backgroundColor: 'transparent',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          borderRadius: '4px'\r\n        });\r\n      });\r\n\r\n      // Style the emote image\r\n      tooltip.querySelectorAll('.emote-preview img').forEach(img => {\r\n        Object.assign(img.style, {\r\n          maxWidth: '100%',\r\n          maxHeight: '100%'\r\n        });\r\n      });\r\n\r\n      // Style the emote info\r\n      tooltip.querySelectorAll('.emote-info').forEach(info => {\r\n        Object.assign(info.style, {\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        });\r\n      });\r\n\r\n      // Style the emote name\r\n      tooltip.querySelectorAll('.emote-name').forEach(name => {\r\n        Object.assign(name.style, {\r\n          fontWeight: 'bold'\r\n        });\r\n      });\r\n\r\n      // Style the service name\r\n      tooltip.querySelectorAll('.emote-service').forEach(service => {\r\n        Object.assign(service.style, {\r\n          fontSize: '12px',\r\n          opacity: '0.8'\r\n        });\r\n      });\r\n\r\n      // Style the separator\r\n      tooltip.querySelectorAll('.emote-separator').forEach(separator => {\r\n        Object.assign(separator.style, {\r\n          height: '1px',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n          margin: '4px 0'\r\n        });\r\n      });\r\n\r\n      // Update tooltip position as the mouse moves\r\n      const updateTooltipPosition = (e) => {\r\n        const tooltipRect = tooltip.getBoundingClientRect();\r\n        const screenWidth = window.innerWidth;\r\n        const cursorX = e.clientX;\r\n        const cursorY = e.clientY;\r\n\r\n        // Position to the left of the cursor\r\n        tooltip.style.left = `${cursorX - tooltipRect.width - 10}px`;\r\n\r\n        // Adjust vertical position if needed\r\n        if (cursorY + tooltipRect.height > window.innerHeight) {\r\n          tooltip.style.top = `${window.innerHeight - tooltipRect.height}px`;\r\n        } else {\r\n          tooltip.style.top = `${cursorY}px`;\r\n        }\r\n      };\r\n\r\n      // Initial position update\r\n      updateTooltipPosition(event);\r\n\r\n      // Handle mouse movement\r\n      document.addEventListener(\"mousemove\", updateTooltipPosition);\r\n\r\n      // Handle mouse leaving the element\r\n      const targetElement = modifierContainer || emoteElement;\r\n      targetElement.addEventListener(\r\n        \"mouseleave\",\r\n        () => {\r\n          tooltip.remove();\r\n          document.removeEventListener(\"mousemove\", updateTooltipPosition);\r\n        },\r\n        { once: true }\r\n      );\r\n    }\r\n  };\r\n\r\n  root.addEventListener(\"mouseover\", handleMouseOver);\r\n};\r\n\r\nasync function addModifierStyles() {\r\n  const style = document.createElement(\"style\");\r\n  style.textContent = `\r\n      .modifier-container {\r\n        display: unset; /* Remove inherited display properties */\r\n        display: inline-grid; /* Use grid for stacking */\r\n        justify-items: center; /* Center items horizontally */\r\n      }\r\n\r\n      .chat-line__no-background * {\r\n        align-items: center;\r\n        vertical-align: middle;\r\n      }\r\n\r\n      .modifier {\r\n        z-index: 1;\r\n      }\r\n\r\n      .modifier-container img {\r\n        grid-area: 1 / 1; /* Stack all images in the same grid area */\r\n        width: min-content; /* Make images fill the container width */\r\n        height: min-content; /* Maintain aspect ratio */\r\n      }\r\n      \r\n      \r\n      .emote-tooltip {\r\n        position: absolute;\r\n        background-color: black;\r\n        color: white;\r\n        padding: 5px;\r\n        border-radius: 4px;\r\n        font-size: 12px;\r\n        pointer-events: none; /* Make sure the tooltip doesn't interfere with mouse events */\r\n        z-index: 1000;\r\n      }\r\n    `;\r\n\r\n  // Append the style element to the document head\r\n  document.head.appendChild(style);\r\n}\r\n\r\nexport {\r\n  setupChatObserver,\r\n  processChatMessage,\r\n  manageEventListeners,\r\n  addModifierStyles,\r\n};\r\n","import { getTwitchUserId } from \"./lib.js\";\r\nimport { initializeEmotes, loadEmotes } from \"./emotes.js\";\r\n\r\n// Ignored pages for URL changes\r\n\r\nconst ignoredPages = {\r\n  settings: true,\r\n  payments: true,\r\n  inventory: true,\r\n  messages: true,\r\n  subscriptions: true,\r\n  friends: true,\r\n  directory: true,\r\n  videos: true,\r\n  prime: true,\r\n  downloads: true\r\n};\r\n\r\nlet navDebug = false;\r\n\r\nfunction matchChannelName(url) {\r\n  if (!url) return undefined;\r\n\r\n  const match = url.match(\r\n    /^https?:\\/\\/(?:www\\.)?twitch\\.tv\\/(\\w+)\\/?(?:\\?.*)?$/\r\n  );\r\n\r\n  if (match && !ignoredPages[match[1]]) {\r\n    return match[1];\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nwindow.navigation.addEventListener(\"navigate\", async (event) => {\r\n  const newUsername = matchChannelName(event.destination.url);\r\n\r\n  if (newUsername) {\r\n    await urlChangeHandler(newUsername);\r\n  }\r\n});\r\n\r\nconst urlChangeHandler = async (newUsername) => {\r\n  if (navDebug)\r\n    console.info(\"URL changed, loading emotes for new user:\", newUsername);\r\n\r\n  const data = await getTwitchUserId(newUsername);\r\n\r\n  await initializeEmotes();\r\n  await loadEmotes({ id: data.id, username: data.username });\r\n};\r\n\r\nexport { matchChannelName, urlChangeHandler };\r\n","import { getTwitchUserId } from \"./lib.js\";\r\n\r\nimport { loadEmotes, initializeEmotes } from \"./emotes.js\";\r\n\r\nimport {\r\n  setupChatObserver,\r\n  addModifierStyles,\r\n  manageEventListeners,\r\n} from \"./dom2.js\";\r\n\r\nimport { matchChannelName } from \"./navigation.js\";\r\n\r\n\r\nsetupChatObserver();\r\n\r\nasync function main() {\r\n  await addModifierStyles();\r\n  await initializeEmotes();\r\n  const currentUsername = matchChannelName(window.location.href);\r\n\r\n  if (currentUsername) {\r\n    manageEventListeners();\r\n    const data = await getTwitchUserId(currentUsername);\r\n    await loadEmotes({ id: data.id, username: data.username });\r\n  }\r\n}\r\n\r\nmain().catch(console.error);\r\n"],"names":["getTwitchUserId","async","username","response","fetch","method","headers","body","JSON","stringify","query","ok","data","json","user","id","emotes","Map","emoteRegex","currentUserObject","globalEmotesLoaded","loadFFZEmotes","Error","status","sets","room","set","emote","emoticons","name","urls","url","bigUrl","height","width","service","error","loadBTTVEmotes","userId","allEmotes","channelEmotes","sharedEmotes","code","load7TVEmotes","emote_set","file","host","files","find","f","modifier","flags","loadEmotes","userObject","Promise","all","createEmoteRegex","getEmote","emoteName","get","emoteMap","escapedEmoteNames","Array","from","keys","map","replace","RegExp","join","initializeEmotes","ffzResponse","bttvResponse","sevenTVResponse","ffzGlobal","bttvGlobal","sevenTVGlobal","loadGlobalEmotes","ChatMessageStateMachine","createTextFragment","text","span","document","createElement","classList","add","textContent","trim","processNode","node","fragment","modifierDiv","currentState","nodeType","Node","TEXT_NODE","split","reduce","acc","word","appendChild","emoteImage","img","src","alt","className","createEmoteImage","div","createModifierContainer","lastElementChild","HTMLImageElement","processWord","ELEMENT_NODE","contains","childNodes","childNode","clonedEmote","cloneNode","processChatMessage","chatMessageBody","element","test","DocumentFragment","processMessageContent","finalFragment","finalizeMessageProcessing","replaceChildren","manageEventListeners","querySelector","addEventListener","event","emoteElement","target","closest","modifierContainer","querySelectorAll","tooltip","forEach","index","getAttribute","emoteInfo","emoteContent","emotePreview","emoteImg","emoteInfoDiv","emoteNameDiv","emoteServiceDiv","toUpperCase","length","separator","Object","assign","style","position","backgroundColor","color","padding","borderRadius","boxShadow","zIndex","fontSize","content","display","alignItems","gap","preview","justifyContent","maxWidth","maxHeight","info","flexDirection","fontWeight","opacity","margin","updateTooltipPosition","e","tooltipRect","getBoundingClientRect","cursorX","window","innerWidth","clientX","cursorY","clientY","left","innerHeight","top","remove","removeEventListener","once","ignoredPages","settings","payments","inventory","messages","subscriptions","friends","directory","videos","prime","downloads","matchChannelName","match","navigation","newUsername","destination","urlChangeHandler","eventListenersLoaded","MutationObserver","mutationsList","i","mutation","type","j","addedNodes","observe","childList","subtree","setupChatObserver","head","addModifierStyles","currentUsername","location","href","main","catch","console"],"sourceRoot":""}